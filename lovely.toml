[manifest]
version = "1.0.2b"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- context.final_scoring_step calculations'''
position = "before"
payload = '''

        if G.GAME.selected_partner_card then
            local ret = G.GAME.selected_partner_card:calculate_partner({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, partner_main = true})
            if ret then
                SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
            end
        end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- context.after calculations'''
position = "before"
payload = '''

    if G.GAME.selected_partner_card then
        local ret = G.GAME.selected_partner_card:calculate_partner({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, partner_after = true})
        if ret then
            SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
        end
    end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- TARGET: effects before scoring starts'''
position = "before"
payload = '''

        if G.GAME.selected_partner_card then
            local ret = G.GAME.selected_partner_card:calculate_partner({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, partner_before = true})
            if ret then
                SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
            end
        end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- TARGET: main end_of_round evaluation'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_end_of_round = true, game_over = game_over})
                if ret then
                    SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- TARGET: setting_blind effects'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_setting_blind = true, blind = G.GAME.round_resets.blind})
                if ret then
                    SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- TARGET: pre_discard'''
position = "before"
payload = '''

        if G.GAME.selected_partner_card then
            local ret = G.GAME.selected_partner_card:calculate_partner({partner_pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
            if ret then
                SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
            end
        end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.calculate_context({discard = true, other_card =  G.hand.highlighted[i], full_hand = G.hand.highlighted}, effects)'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_discard = true, other_card = G.hand.highlighted[i], full_hand = G.hand.highlighted})
                if ret then
                    if ret.remove then
                        removed = true
                    end
                    SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''for _, area in ipairs(SMODS.get_card_areas('jokers')) do'''
position = "before"
payload = '''
    if G.GAME.selected_partner_card then
        local ret = G.GAME.selected_partner_card:calculate_partner_cash()
        if ret then
            add_round_eval_row({dollars = ret, bonus = true, name = "partner", pitch = pitch, card = G.GAME.selected_partner_card})
            pitch = pitch + 0.06
            dollars = dollars + ret
        end
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif config.name == 'interest' then'''
position = "before"
payload = '''
                elseif string.find(config.name, "partner") then
                    table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = localize{type = "name_text", set = config.card.config.center.set, key = config.card.config.center.key}, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.6*scale, silent = true})}})
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- Calculate context.other_joker effects'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_other_main = true, other_card = _card, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands})
                if ret then
                    table.insert(effects, {individual = ret})
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''SMODS.calculate_context({open_booster = true, card = self})'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_open_booster = true, card = self})
                if ret then
                    SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if not nosave_shop then SMODS.calculate_context({starting_shop = true}) end'''
position = "before"
payload = '''

                                if G.GAME.selected_partner_card then
                                    local ret = G.GAME.selected_partner_card:calculate_partner({partner_starting_shop = true})
                                    if ret then
                                        SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                                    end
                                end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''SMODS.calculate_context({reroll_shop = true, cost = reroll_cost})'''
position = "before"
payload = '''

            if G.GAME.selected_partner_card then
                local ret = G.GAME.selected_partner_card:calculate_partner({partner_reroll_shop = true, cost = reroll_cost})
                if ret then
                    SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
                end
            end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''SMODS.calculate_context({ending_shop = true})'''
position = "before"
payload = '''

      if G.GAME.selected_partner_card then
        local ret = G.GAME.selected_partner_card:calculate_partner({partner_ending_shop = true})
        if ret then
          SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
        end
      end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''SMODS.calculate_context({skip_blind = true})'''
position = "before"
payload = '''

          if G.GAME.selected_partner_card then
            local ret = G.GAME.selected_partner_card:calculate_partner({partner_skip_blind = true})
            if ret then
              SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
            end
          end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''SMODS.calculate_context({skipping_booster = true, booster = booster_obj})'''
position = "before"
payload = '''

    if G.GAME.selected_partner_card then
      local ret = G.GAME.selected_partner_card:calculate_partner({partner_skipping_booster = true, booster = booster_obj})
      if ret then
        SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
      end
    end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''SMODS.calculate_context({selling_card = true, card = card})'''
position = "before"
payload = '''

    if G.GAME.selected_partner_card then
      local ret = G.GAME.selected_partner_card:calculate_partner({partner_selling_card = true, card = card})
      if ret then
        SMODS.trigger_effects({{individual = ret}}, G.GAME.selected_partner_card)
      end
    end

'''
match_indent = false
overwrite = false
